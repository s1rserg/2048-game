{"mappings":"ACGA,MAAM,EAAO,ICKb,MAeE,YACE,EAAe,CACb,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACb,CACD,CACA,IAAI,CAAC,YAAY,CAAG,EACpB,IAAI,CAAC,KAAK,CAAG,EAAa,GAAG,CAAC,AAAC,GAAQ,IAAI,EAAI,EAC/C,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,MAAM,CAAG,OACd,IAAI,CAAC,GAAG,CAAG,EACX,IAAI,CAAC,cAAc,CAAG,EACxB,CAEA,UAAW,CACT,OAAO,IAAI,CAAC,IAAI,CAAC,OACnB,CAEA,WAAY,CACV,OAAO,IAAI,CAAC,IAAI,CAAC,QACnB,CAEA,QAAS,CACP,OAAO,IAAI,CAAC,IAAI,CAAC,KACnB,CAEA,UAAW,CACT,OAAO,IAAI,CAAC,IAAI,CAAC,OACnB,CAEA,KAAK,CAAS,CAAE,CACd,GAAI,AAAgB,YAAhB,IAAI,CAAC,MAAM,CACb,MAAO,CAAA,EAGT,IAAM,EAAiB,AAAc,OAAd,GAAsB,AAAc,SAAd,EACvC,EACF,AAAc,OAAd,GAAsB,AAAc,SAAd,EAAuB,OAAS,QACpD,EAAW,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,AAAC,GAAQ,IAAI,EAAI,EAC7C,EAAS,EAET,GACF,CAAA,EAAS,IAAI,CAAC,SAAS,CAAC,EAD1B,EAIA,IAAM,EAAW,IAAI,CAAC,SAAS,CAAC,EAAgB,GAC1C,EAAW,IAAI,CAAC,WAAW,CAAC,EAAgB,UAMlD,AAJI,GACF,IAAI,CAAC,SAAS,CAAC,EAAgB,GAG7B,CAAA,EAAA,KAAY,CAAA,IACV,EACF,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,SAAS,CAAC,GAE5B,IAAI,CAAC,KAAK,CAAG,EAGf,IAAI,CAAC,QAAQ,GACb,IAAI,CAAC,WAAW,GAET,CAAA,EAIX,CAEA,UAAU,EAAY,MAAM,CAAE,EAAS,IAAI,CAAC,KAAK,CAAE,CACjD,IAAI,EAAY,CAAA,EAEhB,IAAK,IAAM,KAAO,EAAQ,CACxB,IAAM,EAAc,EAAI,MAAM,CAAC,AAAC,GAAQ,GAElC,EAAQ,MADE,IAAI,CAAC,GAAG,CAAG,EAAY,MAAM,EAChB,IAAI,CAAC,GAC5B,EACF,AAAc,SAAd,EACE,EAAY,MAAM,CAAC,GACnB,EAAM,MAAM,CAAC,GAEnB,GAAI,EAAI,QAAQ,KAAO,EAAO,QAAQ,GAAI,CACxC,EAAY,CAAA,EAEZ,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,GAAG,CAAE,IAC5B,CAAG,CAAC,EAAE,CAAG,CAAM,CAAC,EAAE,AAEtB,CACF,CAEA,OAAO,CACT,CAEA,YAAY,EAAY,MAAM,CAAE,EAAS,IAAI,CAAC,KAAK,CAAE,CACnD,IAAI,EAAY,CAAA,EAEhB,IAAK,IAAM,KAAO,EAChB,GAAI,AAAc,SAAd,EACF,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,GAAG,CAAE,IACb,IAAX,CAAG,CAAC,EAAE,EAAU,CAAG,CAAC,EAAE,GAAK,CAAG,CAAC,EAAI,EAAE,GACxB,OAAX,CAAG,CAAC,EAAE,EACR,CAAA,IAAI,CAAC,MAAM,CAAG,KADhB,EAGA,EAAY,CAAA,EACZ,CAAG,CAAC,EAAE,EAAI,EACV,CAAG,CAAC,EAAI,EAAE,CAAG,EACb,IAAI,CAAC,KAAK,EAAI,CAAG,CAAC,EAAE,CACpB,UAIJ,IAAK,IAAI,EAAI,IAAI,CAAC,GAAG,CAAG,EAAG,GAAK,EAAG,IAClB,IAAX,CAAG,CAAC,EAAE,EAAU,CAAG,CAAC,EAAE,GAAK,CAAG,CAAC,EAAI,EAAE,GACxB,OAAX,CAAG,CAAC,EAAE,EACR,CAAA,IAAI,CAAC,MAAM,CAAG,KADhB,EAGA,EAAY,CAAA,EACZ,CAAG,CAAC,EAAE,EAAI,EACV,CAAG,CAAC,EAAI,EAAE,CAAG,EACb,IAAI,CAAC,KAAK,EAAI,CAAG,CAAC,EAAE,CACpB,KAMR,OAAO,CACT,CAEA,UAAU,CAAM,CAAE,CAChB,OAAO,CAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAG,IAAa,EAAO,GAAG,CAAC,AAAC,GAAQ,CAAG,CAAC,EAAS,EACzE,CAEA,UAAW,CACT,IAAM,EAAa,EAAE,CAErB,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,GAAG,CAAE,IAC5B,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,GAAG,CAAE,IACH,IAArB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,EAClB,EAAW,IAAI,CAAC,CAAC,EAAG,EAAE,EAK5B,GAAM,CAAC,EAAK,EAAI,CACZ,CAAU,CAAC,KAAK,KAAK,CAAC,KAAK,MAAM,GAAK,EAAW,MAAM,EAAE,CAI7D,OAFA,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,CAAG,KAAK,MAAM,GAAK,IAAI,CAAC,cAAc,CAAG,EAAI,EAE1D,CAAA,CACT,CAEA,aAAc,CACZ,IAAM,EAAe,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,AAAC,GAAQ,EAAI,QAAQ,CAAC,IACrD,EAAoB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,EAAK,IACvC,EAAI,IAAI,CAAC,CAAC,EAAM,IACjB,EAAW,IAAI,CAAC,GAAG,CAAG,GAAK,IAAS,CAAG,CAAC,EAAW,EAAE,EAKvD,EAAW,IAAI,CAAC,GAAG,CAAG,GACnB,IAAS,IAAI,CAAC,KAAK,CAAC,EAAW,EAAE,CAAC,EAAS,GAS/C,GAAiB,GACpB,CAAA,IAAI,CAAC,MAAM,CAAG,MADhB,CAGF,CAKA,UAAW,CACT,OAAO,IAAI,CAAC,KAAK,AACnB,CAKA,UAAW,CACT,OAAO,IAAI,CAAC,KAAK,AACnB,CAYA,WAAY,CACV,OAAO,IAAI,CAAC,MAAM,AACpB,CAKA,OAAQ,CACN,IAAI,CAAC,MAAM,CAAG,UACd,IAAI,CAAC,QAAQ,GACb,IAAI,CAAC,QAAQ,EACf,CAKA,SAAU,CACR,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,MAAM,CAAG,OACd,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,AAAC,GAAQ,IAAI,EAAI,CACtD,CACF,EDhPM,EAAc,SAAS,aAAa,CAAC,WACrC,EAAY,SAAS,aAAa,CAAC,eACnC,EAAe,SAAS,aAAa,CAAC,kBACtC,EAAa,SAAS,aAAa,CAAC,gBACpC,EAAc,SAAS,aAAa,CAAC,iBACrC,EAAY,SAAS,aAAa,CAAC,eAAe,OAAO,CAAC,EAAE,CAAC,IAAI,CAEjE,EAAc,KAClB,IAAM,EAAQ,EAAK,QAAQ,GAE3B,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACrB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IAAK,CAC1B,GAAI,CAAC,CAAK,CAAC,EAAE,CAAC,EAAE,CAAE,CAChB,CAAS,CAAC,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,WAAW,CAAG,GACvC,CAAS,CAAC,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,SAAS,CAAG,GAErC,CAAS,CAAC,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,cACvC,QACF,CACA,CAAS,CAAC,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,WAAW,CAAG,CAAK,CAAC,EAAE,CAAC,EAAE,CAClD,CAAS,CAAC,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,SAAS,CAAG,GAErC,CAAS,CAAC,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,CACpC,aACA,CAAC,YAAY,EAAE,CAAK,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAEhC,CAEJ,EAEA,EAAY,gBAAgB,CAAC,QAAS,KAChC,AAAqB,SAArB,EAAK,SAAS,IAChB,EAAK,KAAK,GAEV,EAAa,SAAS,CAAC,GAAG,CAAC,UAC3B,EAAY,SAAS,CAAC,MAAM,CAAC,SAC7B,EAAY,SAAS,CAAC,GAAG,CAAC,WAC1B,EAAY,WAAW,CAAG,YAE1B,EAAY,SAAS,CAAC,GAAG,CAAC,UAC1B,EAAW,SAAS,CAAC,GAAG,CAAC,UACzB,EAAK,OAAO,GACZ,EAAK,KAAK,IAGZ,GACF,GAEA,SAAS,gBAAgB,CAAC,UAAW,AAAC,IACpC,IAAI,EAAe,CAAA,EACf,EAAa,EAAK,SAAS,GAE/B,GAAI,AAAe,YAAf,GAIJ,OAAQ,EAAE,GAAG,EACX,IAAK,YACH,EAAe,EAAK,QAAQ,GAC5B,KACF,KAAK,aACH,EAAe,EAAK,SAAS,GAC7B,KACF,KAAK,UACH,EAAe,EAAK,MAAM,GAC1B,KACF,KAAK,YACH,EAAe,EAAK,QAAQ,EAEhC,CAEK,IAMc,QAFnB,CAAA,EAAa,EAAK,SAAS,EAA3B,GAGE,EAAW,SAAS,CAAC,MAAM,CAAC,UAGX,SAAf,GACF,EAAY,SAAS,CAAC,MAAM,CAAC,UAG/B,EAAU,WAAW,CAAG,EAAK,QAAQ,GACrC,KACF","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n/* eslint-disable function-paren-newline */ \"use strict\";\n/**\r\n * This class represents the game.\r\n * Now it has a basic structure, that is needed for testing.\r\n * Feel free to add more props and methods if needed.\r\n */ class $a5fd07fa01589658$var$Game {\n    /**\r\n   * Creates a new game instance.\r\n   *\r\n   * @param {number[][]} initialState\r\n   * The initial state of the board.\r\n   * @default\r\n   * [[0, 0, 0, 0],\r\n   *  [0, 0, 0, 0],\r\n   *  [0, 0, 0, 0],\r\n   *  [0, 0, 0, 0]]\r\n   *\r\n   * If passed, the board will be initialized with the provided\r\n   * initial state.\r\n   */ constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.initialState = initialState;\n        this.state = initialState.map((row)=>[\n                ...row\n            ]);\n        this.score = 0;\n        this.status = \"idle\";\n        this.dim = 4;\n        this.twoProbability = 0.9;\n    }\n    moveLeft() {\n        return this.move(\"left\");\n    }\n    moveRight() {\n        return this.move(\"right\");\n    }\n    moveUp() {\n        return this.move(\"up\");\n    }\n    moveDown() {\n        return this.move(\"down\");\n    }\n    move(direction) {\n        if (this.status !== \"playing\") return false;\n        const needsTranspose = direction === \"up\" || direction === \"down\";\n        const swipeDirection = direction === \"up\" || direction === \"left\" ? \"left\" : \"right\";\n        const newState = this.state.map((row)=>[\n                ...row\n            ]);\n        let matrix = newState;\n        if (needsTranspose) matrix = this.transpose(newState);\n        const didSwipe = this.swipeRows(swipeDirection, matrix);\n        const didMerge = this.combineRows(swipeDirection, matrix);\n        if (didMerge) this.swipeRows(swipeDirection, matrix);\n        if (didSwipe || didMerge) {\n            if (needsTranspose) this.state = this.transpose(matrix);\n            else this.state = matrix;\n            this.generate();\n            this.checkStatus();\n            return true;\n        }\n        return false;\n    }\n    swipeRows(direction = \"left\", matrix = this.state) {\n        let isChanged = false;\n        for (const row of matrix){\n            const filteredRow = row.filter((num)=>num);\n            const missing = this.dim - filteredRow.length;\n            const zeros = Array(missing).fill(0);\n            const newRow = direction === \"left\" ? filteredRow.concat(zeros) : zeros.concat(filteredRow);\n            if (row.toString() !== newRow.toString()) {\n                isChanged = true;\n                for(let i = 0; i < this.dim; i++)row[i] = newRow[i];\n            }\n        }\n        return isChanged;\n    }\n    combineRows(direction = \"left\", matrix = this.state) {\n        let isChanged = false;\n        for (const row of matrix)if (direction === \"left\") {\n            for(let i = 0; i < this.dim; i++)if (row[i] !== 0 && row[i] === row[i + 1]) {\n                if (row[i] === 1024) this.status = \"win\";\n                isChanged = true;\n                row[i] *= 2;\n                row[i + 1] = 0;\n                this.score += row[i];\n                i++;\n            }\n        } else {\n            for(let i = this.dim - 1; i >= 0; i--)if (row[i] !== 0 && row[i] === row[i - 1]) {\n                if (row[i] === 1024) this.status = \"win\";\n                isChanged = true;\n                row[i] *= 2;\n                row[i - 1] = 0;\n                this.score += row[i];\n                i--;\n            }\n        }\n        return isChanged;\n    }\n    transpose(matrix) {\n        return matrix[0].map((_, colIndex)=>matrix.map((row)=>row[colIndex]));\n    }\n    generate() {\n        const emptyCells = [];\n        for(let i = 0; i < this.dim; i++){\n            for(let j = 0; j < this.dim; j++)if (this.state[i][j] === 0) emptyCells.push([\n                i,\n                j\n            ]);\n        }\n        const [row, col] = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n        this.state[row][col] = Math.random() < this.twoProbability ? 2 : 4;\n        return true;\n    }\n    checkStatus() {\n        const hasEmptyCell = this.state.some((row)=>row.includes(0));\n        const hasMergeableCells = this.state.some((row, rowIndex)=>{\n            return row.some((cell, colIndex)=>{\n                if (colIndex < this.dim - 1 && cell === row[colIndex + 1]) return true;\n                if (rowIndex < this.dim - 1 && cell === this.state[rowIndex + 1][colIndex]) return true;\n                return false;\n            });\n        });\n        if (!hasEmptyCell && !hasMergeableCells) this.status = \"lose\";\n    }\n    /**\r\n   * @returns {number}\r\n   */ getScore() {\n        return this.score;\n    }\n    /**\r\n   * @returns {number[][]}\r\n   */ getState() {\n        return this.state;\n    }\n    /**\r\n   * Returns the current game status.\r\n   *\r\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\r\n   *\r\n   * `idle` - the game has not started yet (the initial state);\r\n   * `playing` - the game is in progress;\r\n   * `win` - the game is won;\r\n   * `lose` - the game is lost\r\n   */ getStatus() {\n        return this.status;\n    }\n    /**\r\n   * Starts the game.\r\n   */ start() {\n        this.status = \"playing\";\n        this.generate();\n        this.generate();\n    }\n    /**\r\n   * Resets the game.\r\n   */ restart() {\n        this.score = 0;\n        this.status = \"idle\";\n        this.state = this.initialState.map((row)=>[\n                ...row\n            ]);\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$startButton = document.querySelector(\".button\");\nconst $09e991522ca7e64e$var$scoreText = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$startMessage = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$winMessage = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$loseMessage = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$tableRows = document.querySelector(\".game-field\").tBodies[0].rows;\nconst $09e991522ca7e64e$var$renderState = ()=>{\n    const state = $09e991522ca7e64e$var$game.getState();\n    for(let i = 0; i < 4; i++)for(let j = 0; j < 4; j++){\n        if (!state[i][j]) {\n            $09e991522ca7e64e$var$tableRows[i].children[j].textContent = \"\";\n            $09e991522ca7e64e$var$tableRows[i].children[j].className = \"\";\n            $09e991522ca7e64e$var$tableRows[i].children[j].classList.add(\"field-cell\");\n            continue;\n        }\n        $09e991522ca7e64e$var$tableRows[i].children[j].textContent = state[i][j];\n        $09e991522ca7e64e$var$tableRows[i].children[j].className = \"\";\n        $09e991522ca7e64e$var$tableRows[i].children[j].classList.add(\"field-cell\", `field-cell--${state[i][j]}`);\n    }\n};\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$game.getStatus() === \"idle\") {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$startMessage.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$startButton.classList.remove(\"start\");\n        $09e991522ca7e64e$var$startButton.classList.add(\"restart\");\n        $09e991522ca7e64e$var$startButton.textContent = \"Restart\";\n    } else {\n        $09e991522ca7e64e$var$loseMessage.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$winMessage.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$game.start();\n    }\n    $09e991522ca7e64e$var$renderState();\n});\ndocument.addEventListener(\"keydown\", (e)=>{\n    let boardChanged = false;\n    let gameStatus = $09e991522ca7e64e$var$game.getStatus();\n    if (gameStatus !== \"playing\") return;\n    switch(e.key){\n        case \"ArrowLeft\":\n            boardChanged = $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            boardChanged = $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            boardChanged = $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            boardChanged = $09e991522ca7e64e$var$game.moveDown();\n            break;\n    }\n    if (!boardChanged) return;\n    gameStatus = $09e991522ca7e64e$var$game.getStatus();\n    if (gameStatus === \"win\") $09e991522ca7e64e$var$winMessage.classList.remove(\"hidden\");\n    if (gameStatus === \"lose\") $09e991522ca7e64e$var$loseMessage.classList.remove(\"hidden\");\n    $09e991522ca7e64e$var$scoreText.textContent = $09e991522ca7e64e$var$game.getScore();\n    $09e991522ca7e64e$var$renderState();\n});\n\n\n//# sourceMappingURL=index.2a71fb82.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst startButton = document.querySelector('.button');\nconst scoreText = document.querySelector('.game-score');\nconst startMessage = document.querySelector('.message-start');\nconst winMessage = document.querySelector('.message-win');\nconst loseMessage = document.querySelector('.message-lose');\nconst tableRows = document.querySelector('.game-field').tBodies[0].rows;\n\nconst renderState = () => {\n  const state = game.getState();\n\n  for (let i = 0; i < 4; i++) {\n    for (let j = 0; j < 4; j++) {\n      if (!state[i][j]) {\n        tableRows[i].children[j].textContent = '';\n        tableRows[i].children[j].className = '';\n\n        tableRows[i].children[j].classList.add('field-cell');\n        continue;\n      }\n      tableRows[i].children[j].textContent = state[i][j];\n      tableRows[i].children[j].className = '';\n\n      tableRows[i].children[j].classList.add(\n        'field-cell',\n        `field-cell--${state[i][j]}`,\n      );\n    }\n  }\n};\n\nstartButton.addEventListener('click', () => {\n  if (game.getStatus() === 'idle') {\n    game.start();\n\n    startMessage.classList.add('hidden');\n    startButton.classList.remove('start');\n    startButton.classList.add('restart');\n    startButton.textContent = 'Restart';\n  } else {\n    loseMessage.classList.add('hidden');\n    winMessage.classList.add('hidden');\n    game.restart();\n    game.start();\n  }\n\n  renderState();\n});\n\ndocument.addEventListener('keydown', (e) => {\n  let boardChanged = false;\n  let gameStatus = game.getStatus();\n\n  if (gameStatus !== 'playing') {\n    return;\n  }\n\n  switch (e.key) {\n    case 'ArrowLeft':\n      boardChanged = game.moveLeft();\n      break;\n    case 'ArrowRight':\n      boardChanged = game.moveRight();\n      break;\n    case 'ArrowUp':\n      boardChanged = game.moveUp();\n      break;\n    case 'ArrowDown':\n      boardChanged = game.moveDown();\n      break;\n  }\n\n  if (!boardChanged) {\n    return;\n  }\n\n  gameStatus = game.getStatus();\n\n  if (gameStatus === 'win') {\n    winMessage.classList.remove('hidden');\n  }\n\n  if (gameStatus === 'lose') {\n    loseMessage.classList.remove('hidden');\n  }\n\n  scoreText.textContent = game.getScore();\n  renderState();\n});\n","/* eslint-disable function-paren-newline */\r\n'use strict';\r\n\r\n/**\r\n * This class represents the game.\r\n * Now it has a basic structure, that is needed for testing.\r\n * Feel free to add more props and methods if needed.\r\n */\r\nclass Game {\r\n  /**\r\n   * Creates a new game instance.\r\n   *\r\n   * @param {number[][]} initialState\r\n   * The initial state of the board.\r\n   * @default\r\n   * [[0, 0, 0, 0],\r\n   *  [0, 0, 0, 0],\r\n   *  [0, 0, 0, 0],\r\n   *  [0, 0, 0, 0]]\r\n   *\r\n   * If passed, the board will be initialized with the provided\r\n   * initial state.\r\n   */\r\n  constructor(\r\n    initialState = [\r\n      [0, 0, 0, 0],\r\n      [0, 0, 0, 0],\r\n      [0, 0, 0, 0],\r\n      [0, 0, 0, 0],\r\n    ],\r\n  ) {\r\n    this.initialState = initialState;\r\n    this.state = initialState.map((row) => [...row]);\r\n    this.score = 0;\r\n    this.status = 'idle';\r\n    this.dim = 4;\r\n    this.twoProbability = 0.9;\r\n  }\r\n\r\n  moveLeft() {\r\n    return this.move('left');\r\n  }\r\n\r\n  moveRight() {\r\n    return this.move('right');\r\n  }\r\n\r\n  moveUp() {\r\n    return this.move('up');\r\n  }\r\n\r\n  moveDown() {\r\n    return this.move('down');\r\n  }\r\n\r\n  move(direction) {\r\n    if (this.status !== 'playing') {\r\n      return false;\r\n    }\r\n\r\n    const needsTranspose = direction === 'up' || direction === 'down';\r\n    const swipeDirection\r\n      = direction === 'up' || direction === 'left' ? 'left' : 'right';\r\n    const newState = this.state.map((row) => [...row]);\r\n    let matrix = newState;\r\n\r\n    if (needsTranspose) {\r\n      matrix = this.transpose(newState);\r\n    }\r\n\r\n    const didSwipe = this.swipeRows(swipeDirection, matrix);\r\n    const didMerge = this.combineRows(swipeDirection, matrix);\r\n\r\n    if (didMerge) {\r\n      this.swipeRows(swipeDirection, matrix);\r\n    }\r\n\r\n    if (didSwipe || didMerge) {\r\n      if (needsTranspose) {\r\n        this.state = this.transpose(matrix);\r\n      } else {\r\n        this.state = matrix;\r\n      }\r\n\r\n      this.generate();\r\n      this.checkStatus();\r\n\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  swipeRows(direction = 'left', matrix = this.state) {\r\n    let isChanged = false;\r\n\r\n    for (const row of matrix) {\r\n      const filteredRow = row.filter((num) => num);\r\n      const missing = this.dim - filteredRow.length;\r\n      const zeros = Array(missing).fill(0);\r\n      const newRow\r\n        = direction === 'left'\r\n          ? filteredRow.concat(zeros)\r\n          : zeros.concat(filteredRow);\r\n\r\n      if (row.toString() !== newRow.toString()) {\r\n        isChanged = true;\r\n\r\n        for (let i = 0; i < this.dim; i++) {\r\n          row[i] = newRow[i];\r\n        }\r\n      }\r\n    }\r\n\r\n    return isChanged;\r\n  }\r\n\r\n  combineRows(direction = 'left', matrix = this.state) {\r\n    let isChanged = false;\r\n\r\n    for (const row of matrix) {\r\n      if (direction === 'left') {\r\n        for (let i = 0; i < this.dim; i++) {\r\n          if (row[i] !== 0 && row[i] === row[i + 1]) {\r\n            if (row[i] === 1024) {\r\n              this.status = 'win';\r\n            }\r\n            isChanged = true;\r\n            row[i] *= 2;\r\n            row[i + 1] = 0;\r\n            this.score += row[i];\r\n            i++;\r\n          }\r\n        }\r\n      } else {\r\n        for (let i = this.dim - 1; i >= 0; i--) {\r\n          if (row[i] !== 0 && row[i] === row[i - 1]) {\r\n            if (row[i] === 1024) {\r\n              this.status = 'win';\r\n            }\r\n            isChanged = true;\r\n            row[i] *= 2;\r\n            row[i - 1] = 0;\r\n            this.score += row[i];\r\n            i--;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return isChanged;\r\n  }\r\n\r\n  transpose(matrix) {\r\n    return matrix[0].map((_, colIndex) => matrix.map((row) => row[colIndex]));\r\n  }\r\n\r\n  generate() {\r\n    const emptyCells = [];\r\n\r\n    for (let i = 0; i < this.dim; i++) {\r\n      for (let j = 0; j < this.dim; j++) {\r\n        if (this.state[i][j] === 0) {\r\n          emptyCells.push([i, j]);\r\n        }\r\n      }\r\n    }\r\n\r\n    const [row, col]\r\n      = emptyCells[Math.floor(Math.random() * emptyCells.length)];\r\n\r\n    this.state[row][col] = Math.random() < this.twoProbability ? 2 : 4;\r\n\r\n    return true;\r\n  }\r\n\r\n  checkStatus() {\r\n    const hasEmptyCell = this.state.some((row) => row.includes(0));\r\n    const hasMergeableCells = this.state.some((row, rowIndex) => {\r\n      return row.some((cell, colIndex) => {\r\n        if (colIndex < this.dim - 1 && cell === row[colIndex + 1]) {\r\n          return true;\r\n        }\r\n\r\n        if (\r\n          rowIndex < this.dim - 1\r\n          && cell === this.state[rowIndex + 1][colIndex]\r\n        ) {\r\n          return true;\r\n        }\r\n\r\n        return false;\r\n      });\r\n    });\r\n\r\n    if (!hasEmptyCell && !hasMergeableCells) {\r\n      this.status = 'lose';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {number}\r\n   */\r\n  getScore() {\r\n    return this.score;\r\n  }\r\n\r\n  /**\r\n   * @returns {number[][]}\r\n   */\r\n  getState() {\r\n    return this.state;\r\n  }\r\n\r\n  /**\r\n   * Returns the current game status.\r\n   *\r\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\r\n   *\r\n   * `idle` - the game has not started yet (the initial state);\r\n   * `playing` - the game is in progress;\r\n   * `win` - the game is won;\r\n   * `lose` - the game is lost\r\n   */\r\n  getStatus() {\r\n    return this.status;\r\n  }\r\n\r\n  /**\r\n   * Starts the game.\r\n   */\r\n  start() {\r\n    this.status = 'playing';\r\n    this.generate();\r\n    this.generate();\r\n  }\r\n\r\n  /**\r\n   * Resets the game.\r\n   */\r\n  restart() {\r\n    this.score = 0;\r\n    this.status = 'idle';\r\n    this.state = this.initialState.map((row) => [...row]);\r\n  }\r\n}\r\n\r\nmodule.exports = Game;\r\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","state","map","row","score","status","dim","twoProbability","moveLeft","move","moveRight","moveUp","moveDown","direction","needsTranspose","swipeDirection","newState","matrix","transpose","didSwipe","swipeRows","didMerge","combineRows","generate","checkStatus","isChanged","filteredRow","filter","num","zeros","Array","length","fill","newRow","concat","toString","i","_","colIndex","emptyCells","j","push","col","Math","floor","random","hasEmptyCell","some","includes","hasMergeableCells","rowIndex","cell","getScore","getState","getStatus","start","restart","$09e991522ca7e64e$var$startButton","document","querySelector","$09e991522ca7e64e$var$scoreText","$09e991522ca7e64e$var$startMessage","$09e991522ca7e64e$var$winMessage","$09e991522ca7e64e$var$loseMessage","$09e991522ca7e64e$var$tableRows","tBodies","rows","$09e991522ca7e64e$var$renderState","children","textContent","className","classList","add","addEventListener","remove","e","boardChanged","gameStatus","key"],"version":3,"file":"index.2a71fb82.js.map"}